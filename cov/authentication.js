/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['authentication.js']) {
  _$jscoverage['authentication.js'] = [];
  _$jscoverage['authentication.js'][1] = 0;
  _$jscoverage['authentication.js'][3] = 0;
  _$jscoverage['authentication.js'][5] = 0;
  _$jscoverage['authentication.js'][7] = 0;
  _$jscoverage['authentication.js'][8] = 0;
  _$jscoverage['authentication.js'][10] = 0;
  _$jscoverage['authentication.js'][11] = 0;
  _$jscoverage['authentication.js'][14] = 0;
  _$jscoverage['authentication.js'][15] = 0;
  _$jscoverage['authentication.js'][16] = 0;
  _$jscoverage['authentication.js'][18] = 0;
  _$jscoverage['authentication.js'][19] = 0;
  _$jscoverage['authentication.js'][20] = 0;
  _$jscoverage['authentication.js'][25] = 0;
  _$jscoverage['authentication.js'][26] = 0;
  _$jscoverage['authentication.js'][27] = 0;
  _$jscoverage['authentication.js'][32] = 0;
  _$jscoverage['authentication.js'][33] = 0;
  _$jscoverage['authentication.js'][38] = 0;
  _$jscoverage['authentication.js'][39] = 0;
  _$jscoverage['authentication.js'][40] = 0;
  _$jscoverage['authentication.js'][43] = 0;
  _$jscoverage['authentication.js'][44] = 0;
  _$jscoverage['authentication.js'][45] = 0;
  _$jscoverage['authentication.js'][48] = 0;
  _$jscoverage['authentication.js'][49] = 0;
  _$jscoverage['authentication.js'][54] = 0;
  _$jscoverage['authentication.js'][55] = 0;
  _$jscoverage['authentication.js'][56] = 0;
  _$jscoverage['authentication.js'][57] = 0;
  _$jscoverage['authentication.js'][58] = 0;
  _$jscoverage['authentication.js'][59] = 0;
  _$jscoverage['authentication.js'][63] = 0;
  _$jscoverage['authentication.js'][65] = 0;
  _$jscoverage['authentication.js'][66] = 0;
  _$jscoverage['authentication.js'][70] = 0;
  _$jscoverage['authentication.js'][72] = 0;
  _$jscoverage['authentication.js'][73] = 0;
  _$jscoverage['authentication.js'][74] = 0;
  _$jscoverage['authentication.js'][78] = 0;
  _$jscoverage['authentication.js'][80] = 0;
  _$jscoverage['authentication.js'][83] = 0;
}
_$jscoverage['authentication.js'][1]++;
var passport = require("passport"), LocalStrategy = require("passport-local").Strategy;
_$jscoverage['authentication.js'][3]++;
exports.passport = passport;
_$jscoverage['authentication.js'][5]++;
var user = require("./user.js");
_$jscoverage['authentication.js'][7]++;
exports.passportInit = (function () {
  _$jscoverage['authentication.js'][8]++;
  passport.use(new LocalStrategy((function (username, password, done) {
  _$jscoverage['authentication.js'][10]++;
  console.log("Using Passport local strategy with credentials: " + username + "/" + password);
  _$jscoverage['authentication.js'][11]++;
  user.findOne({email: username}, (function (err, user) {
  _$jscoverage['authentication.js'][14]++;
  if (err) {
    _$jscoverage['authentication.js'][15]++;
    console.log("Error whiel calling user.findOne(): " + err);
    _$jscoverage['authentication.js'][16]++;
    return done(err);
  }
  _$jscoverage['authentication.js'][18]++;
  if (! user) {
    _$jscoverage['authentication.js'][19]++;
    console.log("Error: Incorent username");
    _$jscoverage['authentication.js'][20]++;
    return done(null, false, {field: "email", message: "Incorrect username."});
  }
  _$jscoverage['authentication.js'][25]++;
  if (! user.validPassword(password)) {
    _$jscoverage['authentication.js'][26]++;
    console.log("Error: Incorrect password");
    _$jscoverage['authentication.js'][27]++;
    return done(null, false, {field: "pass", message: "Incorrect password."});
  }
  _$jscoverage['authentication.js'][32]++;
  console.log("Using Passport local strategy with credentials: " + username + "/" + password + " success!");
  _$jscoverage['authentication.js'][33]++;
  return done(null, user);
}));
})));
  _$jscoverage['authentication.js'][38]++;
  passport.serializeUser((function (user, done) {
  _$jscoverage['authentication.js'][39]++;
  console.log("Serializing user " + JSON.stringify(user));
  _$jscoverage['authentication.js'][40]++;
  done(null, user.id);
}));
  _$jscoverage['authentication.js'][43]++;
  passport.deserializeUser((function (id, done) {
  _$jscoverage['authentication.js'][44]++;
  console.log("Deserializing of " + id);
  _$jscoverage['authentication.js'][45]++;
  user.findOne({_id: id}, (function (err, user) {
  _$jscoverage['authentication.js'][48]++;
  console.log("Obtaining " + JSON.stringify(user));
  _$jscoverage['authentication.js'][49]++;
  done(err, user);
}));
}));
});
_$jscoverage['authentication.js'][54]++;
exports.authenticate = (function (req, res, next) {
  _$jscoverage['authentication.js'][55]++;
  passport.authenticate("local", (function (err, user, info) {
  _$jscoverage['authentication.js'][56]++;
  var data = new Object();
  _$jscoverage['authentication.js'][57]++;
  data.err = [];
  _$jscoverage['authentication.js'][58]++;
  if (err) {
    _$jscoverage['authentication.js'][59]++;
    data.err.push({field: "general", error: err});
    _$jscoverage['authentication.js'][63]++;
    return res.send(data);
  }
  _$jscoverage['authentication.js'][65]++;
  if (! user) {
    _$jscoverage['authentication.js'][66]++;
    data.err.push({field: info.field, error: info.message});
    _$jscoverage['authentication.js'][70]++;
    return res.send(data);
  }
  _$jscoverage['authentication.js'][72]++;
  req.logIn(user, (function (err) {
  _$jscoverage['authentication.js'][73]++;
  if (err) {
    _$jscoverage['authentication.js'][74]++;
    data.err.push({field: "general", error: err});
    _$jscoverage['authentication.js'][78]++;
    return res.send(data);
  }
  _$jscoverage['authentication.js'][80]++;
  data.redirect = {path: "/"};
  _$jscoverage['authentication.js'][83]++;
  return res.send(data);
}));
}))(req, res, next);
});
_$jscoverage['authentication.js'].source = ["var passport = require('passport'),","    LocalStrategy = require('passport-local').Strategy;","exports.passport = passport;","","var user = require('./user.js');","","exports.passportInit = function () {","    passport.use(new LocalStrategy(","        function (username, password, done) {","            console.log('Using Passport local strategy with credentials: ' + username + '/' + password);","            user.findOne({","                email: username","            }, function (err, user) {","                if (err) {","                    console.log('Error whiel calling user.findOne(): ' + err)","                    return done(err);","                }","                if (!user) {","                    console.log('Error: Incorent username');","                    return done(null, false, {","                        field: 'email',","                        message: 'Incorrect username.'","                    });","                }","                if (!user.validPassword(password)) {","                    console.log('Error: Incorrect password');","                    return done(null, false, {","                        field: 'pass',","                        message: 'Incorrect password.'","                    });","                }","                console.log('Using Passport local strategy with credentials: ' + username + '/' + password + ' success!');","                return done(null, user);","            });","        }","    ));","","    passport.serializeUser(function (user, done) {","        console.log('Serializing user ' + JSON.stringify(user));","        done(null, user.id);","    });","","    passport.deserializeUser(function (id, done) {","        console.log('Deserializing of ' + id);","        user.findOne({","            _id: id","        }, function (err, user) {","            console.log('Obtaining ' + JSON.stringify(user));","            done(err, user);","        });","    });","}","","exports.authenticate = function (req, res, next) {","    passport.authenticate('local', function (err, user, info) {","        var data = new Object();","        data.err = [];","        if (err) {","            data.err.push({","                field: 'general',","                error: err","            });","            return res.send(data);","        }","        if (!user) {","            data.err.push({","                field: info.field,","                error: info.message","            });","            return res.send(data);","        }","        req.logIn(user, function (err) {","            if (err) {","                data.err.push({","                    field: 'general',","                    error: err","                });","                return res.send(data);","            }","            data.redirect = {","                path: '/'","            }","            return res.send(data);","        });","    })(req, res, next);","}"];
