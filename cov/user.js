/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['user.js']) {
  _$jscoverage['user.js'] = [];
  _$jscoverage['user.js'][1] = 0;
  _$jscoverage['user.js'][3] = 0;
  _$jscoverage['user.js'][4] = 0;
  _$jscoverage['user.js'][6] = 0;
  _$jscoverage['user.js'][7] = 0;
  _$jscoverage['user.js'][8] = 0;
  _$jscoverage['user.js'][10] = 0;
  _$jscoverage['user.js'][11] = 0;
  _$jscoverage['user.js'][12] = 0;
  _$jscoverage['user.js'][13] = 0;
  _$jscoverage['user.js'][15] = 0;
  _$jscoverage['user.js'][16] = 0;
  _$jscoverage['user.js'][20] = 0;
  _$jscoverage['user.js'][63] = 0;
  _$jscoverage['user.js'][64] = 0;
  _$jscoverage['user.js'][65] = 0;
  _$jscoverage['user.js'][67] = 0;
  _$jscoverage['user.js'][71] = 0;
  _$jscoverage['user.js'][73] = 0;
  _$jscoverage['user.js'][74] = 0;
  _$jscoverage['user.js'][103] = 0;
  _$jscoverage['user.js'][104] = 0;
  _$jscoverage['user.js'][105] = 0;
  _$jscoverage['user.js'][106] = 0;
  _$jscoverage['user.js'][108] = 0;
  _$jscoverage['user.js'][110] = 0;
  _$jscoverage['user.js'][111] = 0;
  _$jscoverage['user.js'][114] = 0;
  _$jscoverage['user.js'][115] = 0;
  _$jscoverage['user.js'][116] = 0;
  _$jscoverage['user.js'][119] = 0;
  _$jscoverage['user.js'][124] = 0;
  _$jscoverage['user.js'][125] = 0;
  _$jscoverage['user.js'][130] = 0;
  _$jscoverage['user.js'][131] = 0;
  _$jscoverage['user.js'][155] = 0;
  _$jscoverage['user.js'][156] = 0;
  _$jscoverage['user.js'][157] = 0;
  _$jscoverage['user.js'][158] = 0;
  _$jscoverage['user.js'][159] = 0;
  _$jscoverage['user.js'][160] = 0;
  _$jscoverage['user.js'][162] = 0;
  _$jscoverage['user.js'][163] = 0;
  _$jscoverage['user.js'][165] = 0;
  _$jscoverage['user.js'][166] = 0;
  _$jscoverage['user.js'][168] = 0;
}
_$jscoverage['user.js'][1]++;
var randomstring = require("randomstring");
_$jscoverage['user.js'][3]++;
var witken_users = "mongodb://witkenDB:usersDB2013WitKen@ds057538.mongolab.com:57538/witken_users";
_$jscoverage['user.js'][4]++;
var mongoose = require("mongoose");
_$jscoverage['user.js'][6]++;
exports.init = (function () {
  _$jscoverage['user.js'][7]++;
  mongoose.connect(witken_users);
  _$jscoverage['user.js'][8]++;
  var db = mongoose.connection;
  _$jscoverage['user.js'][10]++;
  db.on("error", (function () {
  _$jscoverage['user.js'][11]++;
  console.log("Failed to connect to UsersDB");
  _$jscoverage['user.js'][12]++;
  if (require("./server.js").connected === "YES") {
    _$jscoverage['user.js'][13]++;
    process.exit(1);
  }
}));
  _$jscoverage['user.js'][15]++;
  db.once("open", (function callback() {
  _$jscoverage['user.js'][16]++;
  console.log("Connected to UsersDB");
}));
});
_$jscoverage['user.js'][20]++;
var userSchema = mongoose.Schema({email: String, password: {type: String, default: randomstring.generate()}, hasPassword: {type: Boolean, default: false}, human_data: {prefix: String, first_name: String, last_name: String, gender: String, birth_date: Date}, contact: {home_phone: String, cell_phone: String, home_address: String, home_postal_code: String, home_country_code: String, home_city: String}, job: {job_title: String, work_address: String}, eventbrite: [{event_id: Number, ticket_id: Number}], witken: {results: {type: Array, default: []}}});
_$jscoverage['user.js'][63]++;
userSchema.methods.validPassword = (function (p) {
  _$jscoverage['user.js'][64]++;
  if (this.hasPassword) {
    _$jscoverage['user.js'][65]++;
    return p === this.password;
  }
  else {
    _$jscoverage['user.js'][67]++;
    return false;
  }
});
_$jscoverage['user.js'][71]++;
var User = mongoose.model("User", userSchema);
_$jscoverage['user.js'][73]++;
exports.confirmOrder = (function (eb_data, callback) {
  _$jscoverage['user.js'][74]++;
  var user = new User({email: eb_data.email, human_data: {prefix: eb_data.prefix, first_name: eb_data.first_name, last_name: eb_data.last_name, gender: eb_data.gender, birth_date: new Date(eb_data.birth_date)}, contact: {home_phone: eb_data.home_phone, cell_phone: eb_data.cell_phone, home_address: eb_data.home_address, home_postal_code: eb_data.home_postal_code, home_country_code: eb_data.home_country_code, home_city: eb_data.home_city}, job: {job_title: eb_data.job_title, work_address: eb_data.work_address}, eventbrite: [{event_id: eb_data.event_id, ticket_id: eb_data.ticket_id}]});
  _$jscoverage['user.js'][103]++;
  var query = generateQuery(user);
  _$jscoverage['user.js'][104]++;
  User.find(query, (function (err, results) {
  _$jscoverage['user.js'][105]++;
  if (err) {
    _$jscoverage['user.js'][106]++;
    return callback(err);
  }
  _$jscoverage['user.js'][108]++;
  if (results.length === 0) {
    _$jscoverage['user.js'][110]++;
    user.save((function (err, u) {
  _$jscoverage['user.js'][111]++;
  return callback(err, getPublicObject(u));
}));
  }
  else {
    _$jscoverage['user.js'][114]++;
    if (results.length > 1) {
      _$jscoverage['user.js'][115]++;
      console.log("OH SHIT!");
      _$jscoverage['user.js'][116]++;
      return callback("Server problems!");
    }
    _$jscoverage['user.js'][119]++;
    return callback(null, getPublicObject(results[0]));
  }
}));
});
_$jscoverage['user.js'][124]++;
var generateQuery = (function (user) {
  _$jscoverage['user.js'][125]++;
  return ({email: user.email});
});
_$jscoverage['user.js'][130]++;
var getPublicObject = (function (user) {
  _$jscoverage['user.js'][131]++;
  return ({email: user.email, human_data: {prefix: user.human_data.prefix, first_name: user.human_data.first_name, last_name: user.human_data.last_name, gender: user.human_data.gender, birth_date: new Date(user.human_data.birth_date)}, contact: {home_phone: user.contact.home_phone, cell_phone: user.contact.cell_phone, home_address: user.contact.home_address, home_postal_code: user.contact.home_postal_code, home_country_code: user.contact.home_country_code, home_city: user.contact.home_city}, job: {job_title: user.contact.job_title, work_address: user.contact.work_address}});
});
_$jscoverage['user.js'][155]++;
exports.findOne = (function (query, callback) {
  _$jscoverage['user.js'][156]++;
  console.log("User.findOne called with query " + JSON.stringify(query));
  _$jscoverage['user.js'][157]++;
  User.find(query, (function (err, users) {
  _$jscoverage['user.js'][158]++;
  console.log("Result: err=" + err + ", users=" + JSON.stringify(users));
  _$jscoverage['user.js'][159]++;
  if (err) {
    _$jscoverage['user.js'][160]++;
    return callback(err);
  }
  _$jscoverage['user.js'][162]++;
  if (users.length === 0) {
    _$jscoverage['user.js'][163]++;
    return callback(err, null);
  }
  _$jscoverage['user.js'][165]++;
  if (users.length > 1) {
    _$jscoverage['user.js'][166]++;
    return callback("More than one user with the same " + JSON.stringify(query));
  }
  _$jscoverage['user.js'][168]++;
  return callback(null, users[0]);
}));
});
_$jscoverage['user.js'].source = ["var randomstring = require(\"randomstring\");","","var witken_users = 'mongodb://witkenDB:usersDB2013WitKen@ds057538.mongolab.com:57538/witken_users'","var mongoose = require('mongoose');","","exports.init = function () {","    mongoose.connect(witken_users);","    var db = mongoose.connection;","","    db.on('error', function () {","        console.log('Failed to connect to UsersDB');","        if (require('./server.js').connected === 'YES')","            process.exit(1);","    });","    db.once('open', function callback() {","        console.log('Connected to UsersDB');","    });","}","","var userSchema = mongoose.Schema({","    email: String,","    password: {","        type: String,","        default: randomstring.generate()","    },","    hasPassword: {","        type: Boolean,","        default: false","    },","    human_data: {","        prefix: String,","        first_name: String,","        last_name: String,","        gender: String,","        birth_date: Date,","    },","    contact: {","        home_phone: String,","        cell_phone: String,","        home_address: String,","        home_postal_code: String,","        home_country_code: String,","        home_city: String,","    },","    job: {","        job_title: String,","        work_address: String","    },","    eventbrite: [","        {","            event_id: Number,","            ticket_id: Number","            }","        ],","    witken: {","        results: {","            type: Array,","            default: [],","        }","    }","});","","userSchema.methods.validPassword = function (p) {","    if (this.hasPassword) {","        return p === this.password;","    } else {","        return false;","    }","}","","var User = mongoose.model('User', userSchema);","","exports.confirmOrder = function (eb_data, callback) {","    var user = new User({","        email: eb_data.email,","        human_data: {","            prefix: eb_data.prefix,","            first_name: eb_data.first_name,","            last_name: eb_data.last_name,","            gender: eb_data.gender,","            birth_date: new Date(eb_data.birth_date),","        },","        contact: {","            home_phone: eb_data.home_phone,","            cell_phone: eb_data.cell_phone,","            home_address: eb_data.home_address,","            home_postal_code: eb_data.home_postal_code,","            home_country_code: eb_data.home_country_code,","            home_city: eb_data.home_city,","        },","        job: {","            job_title: eb_data.job_title,","            work_address: eb_data.work_address","        },","        eventbrite: [","            {","                event_id: eb_data.event_id,","                ticket_id: eb_data.ticket_id","            }","        ]","    });","","    var query = generateQuery(user);","    User.find(query, function (err, results) {","        if (err) {","            return callback(err);","        }","        if (results.length === 0) {","            //No such user!","            user.save(function (err, u) {","                return callback(err, getPublicObject(u));","            })","        } else {","            if (results.length &gt; 1) {","                console.log('OH SHIT!');","                return callback('Server problems!');","            }","","            return callback(null, getPublicObject(results[0]));","        }","    });","}","","var generateQuery = function (user) {","    return {","        email: user.email","    }","}","","var getPublicObject = function (user) {","    return {","        email: user.email,","        human_data: {","            prefix: user.human_data.prefix,","            first_name: user.human_data.first_name,","            last_name: user.human_data.last_name,","            gender: user.human_data.gender,","            birth_date: new Date(user.human_data.birth_date),","        },","        contact: {","            home_phone: user.contact.home_phone,","            cell_phone: user.contact.cell_phone,","            home_address: user.contact.home_address,","            home_postal_code: user.contact.home_postal_code,","            home_country_code: user.contact.home_country_code,","            home_city: user.contact.home_city,","        },","        job: {","            job_title: user.contact.job_title,","            work_address: user.contact.work_address","        }","    };","}","","exports.findOne = function (query, callback) {","    console.log('User.findOne called with query ' + JSON.stringify(query));","    User.find(query, function (err, users) {","        console.log('Result: err=' + err + ', users=' + JSON.stringify(users));","        if (err) {","            return callback(err);","        }","        if (users.length === 0) {","            return callback(err, null);","        }","        if (users.length &gt; 1) {","            return callback('More than one user with the same ' + JSON.stringify(query));","        }","        return callback(null, users[0]);","    });","}"];
